Q) Given:
   var b = (byte)126;
   outer:
   for (var n = 1000; n < 1002; n++) {
     for (var j = 4; j >= 0; j--, b++) {
       if (j < 3) break;
       else if (n == 1001) continue outer;
       b++;
     }
   }
   System.out.printf("b = %d\n", b);


What is the output
A) b = 129
B) b = 130
C) b = -126
D) b = -128
E) an exception is thrown

Q) Which are legal:

A)
class A {
    var x = 99;
}

B)
void doStuffB(var x) { }

C)
void doStuffC() {
     var x;
     x = 100;
 }

D)
void doStuffD() {
   var x = 100;
 }

E)
void doStuffE() {
    var x = null;
 }

 void xxx() throws Throwable {
F)
  var [] f = { 1,2,3 };

G)
  var g = new int[]{ 1,2,3 };

H)
    var h1 = 10, h2 = 100;

I)
  var i = true ? "99" : 99;

J)
  var var = "var";

  Iterable<String> ki = null;
K)
  for (var k : ki) {}

L)
  try {
     if (Math.random() > 0.5) throw new SQLException();
  } catch (var anException) {}

Q) Which creates the output:
X"hello"
  javaX

String A = """
    \"hello\"
      java    """;
var message = "X" + A + "X";

String B = """
    "hello"
      java
      """;
var message = "X" + B + "X";

String C = """
    \qhello\q
      java
    """;
var message = "X" + C + "X";

String D = """
    \"hello\"
      java""";
var message = ("X" + D + "X").indent(-4);

String E = """"hello"
      java""";
var message = ("X" + E + "X").indent(-4);

String F = """
    "hello"\n   java""";
var message = "X" + F + "X";

out.println(message);

Q)Given:
    int x = -1;
    System.out.println(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q) Given:
  private static int count = 22;
  public static boolean getValue() {
    count++;
    return true;
  }

and:
    boolean b1 = false;
    if (!b1 & getValue()) {
      System.out.println(count);
    } else {
      System.out.println("No " + count);
    }

What is the result:
A) Compilation fails
B) No 22
C) No 23
D) 22
E) 23

Q) Given:
class X { // separately compiled
  static String h = "Hel" + "lo";
}

and:
  String s1 = "Hello";
  String s2 = new StringBuilder("Hello").toString();
  String s3 = s2.intern();

Which are true?
  A) s1 == s2
  B) s2 == s3
  C) s1 == s3
  D) X.h == s1
  E) None of the above

Q) Given:
class P {
  protected int x;
  public P(int x) { this.x = x; }
  // line n1
}

class Q extends P {
  private int y;
  public Q(int x, int y) { super(x); this.y = y; }
  public boolean equals(Object obj) {
    return obj instanceof Q other && super.equals(obj) && other.y == this.y;
  }
}
and:
    P p = new P(10);
    P p2 = new P(10);
    P q = new Q(10, 10);
    P q2 = new Q(10, 12);
    out.print(p.equals(p2) + " ");
    out.print(p.equals(q) + " ");
    out.print(p.equals(q2) + " ");
    out.print(q.equals(p) + " ");
    out.println(q.equals(q2));
which, inserted at line n1, causes the output true true true true true?

A)
 public boolean equals(Object o) {
   return o instanceof P other && this.x == other.x;
 }

B)
 public boolean equals(P other) {
   return this.x == other.x;
 }

C)
 public boolean equals(Object o) {
   return o.getClass() == P.class && o instanceof P other && this.x == other.x;
 }

Q) Which print true?
Iterable<String> is = List.of("a", "b", "c");
Object obj = is;

A) System.out.println(is instanceof List);
B) System.out.println(obj instanceof List l && l.size() > 2);
C) System.out.println(obj instanceof List<String> ls);
D) System.out.println(is instanceof Collection<? extends CharSequence> cs);
E) System.out.println(is instanceof List<String> ls || ls.size() > 2);

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }
and:
    Base b = new Sub();
    ((Runnable) b).run();

What is the result?
A) doSubStuff
B) doOtherStuff
C) doBaseStuff
D) Exception at runtime
E) Compilation failure

Q) Given:
public class OverloadResolution1 {
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

  void tryStuff() {
    doStuff(1, 2);
  }
}

What happens if method A is deleted?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q) Given:
  enum X { HELLO, GOODBYE; }
  X x = X.HELLO;

Which cause the output of "Hello"?
A)
out.println(
  switch (x) {
    case HELLO ->
    case GOODBYE ->
      yield "Hello";
  });

B)
out.println(switch(x) {
  case HELLO -> "Hello";
});

C)
out.println(switch(x) {
  case HELLO -> {
    var var = "Hello";
    yield var;
  }
  default -> "";
});

D)
out.println(switch(x) {
  case HELLO: {
    var var = "Hello";
    yield var;
  }
  default: "";
  });

E)
out.println(switch(x) {
  case HELLO, GOODBYE:
    yield "Hello";
});

F)
Object obj = x;
out.println(switch(obj) {
  case HELLO, GOODBYE -> "Hello";
});

G)
out.println(switch(x) {
  case X.HELLO, X.GOODBYE -> { yield "Hello"; }
});

Q)
Given:
    try (
        var fr = new FileReader("main.txt"); // line n1
        var br = new BufferedReader(fr);     // line n2
        ) {
          if (!br.ready()) {
            br = new BufferedReader(new FileReader("backup.txt")); // line n3
          }
          String line;
          while ((line = br.readLine()) != null)
            System.out.println(">> " + line);
        }

What is the result?
A) Compilation fails at line n1
B) Compilation fails at line n2
C) Compilation fails at line n3
D) If main.txt is readable, its contents are shown,
   but if not, the contents of backup.txt are shown
E) If main.txt is readable, its contents are shown
   but if not, the program exits with an unhandled exception

Q) Given
class AC3 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    System.out.println("Closing");
    throw new SQLException();
  }
}
And:
  public static void main(String[] args) throws Throwable {
    try (
        var one = new AC3();
        var two = new AC3();
        ){
    }
  }
What is the result (choose only one)?
A) Compilation fails
B) Closing
   Closing
C) Closing
   SQLException halts the program
D) Closing
   Closing
   SQLException halts the program
E) No output, SQLException halts the program

Q) Given:
enum Day {
  MONDAY(1), TUESDAY;
// line n1
}
and:
System.out.println(Day.MONDAY)

Which is/are true?
A) The code compiles as is
B) If the following is added at line n1, the code compiles:
   public Day(int d) {}
C) If the following is added at line n1, the code compiles:
   Day(int d) {}
D) If the following is added at line n1, the code compiles:
   Day(int d) {} Day() {}
E) If the MONDAY(1), is changed to MONDAY, the code compiles:

Q) Given:
interface GameDescriptor {
  String gameType();
}
abstract class GD {
  public abstract String gameType();
}
enum Suit {
  HEARTS, DIAMONDS, CLUBS, SPADES;
// line n1
  boolean isTrumps() { return this == HEARTS; }
}
Which is/are true?
A) isTrumps is implicitly static
B) compilation fails, but marking isTrumps static corrects the problem
C) isTrumps can be marked final
D) if it's necessary to prevent isTrumps being overridden,
   it should be marked final
E) this can be added at line n1:
   private static Suit trumps = HEARTS;
F) Suit can be modified to implement the GameDescriptor interface
   if this code is added at line n1:
   public String gameType() { return "Cards"; }
G) Suit can be modified to extend the GD class if this code is
   added at line n1:
   public String gameType() { return "Cards"; }
H) none of the above

Q) Given:
class OuterP {
  class InnerP1 {
    private void doStuff() {
      System.out.println("InnerP1.doStuff()");
    }
  }
  class InnerP2 extends InnerP1 {
    public void doStuff() {
      System.out.println("InnerP2.doStuff()");
    }
  }
  public static void main(String[] args) {
    OuterP.InnerP1 op = new OuterP().new InnerP2();
    op.doStuff();
  }
}

What is the result?
A) Does not compile
B) Exception at runtime
C) InnerP1.doStuff()
D) InnerP2.doStuff()

Q)
Given
class Outer {
  class Inner{
  }
}

Which create an instance of Inner?
A) new Inner();
B) new Outer.Inner();
C) Outer ou = new Outer(); new ou.Inner(); // NO!! ou.new Inner() would work...
D) new Outer().new Inner();
E) new Outer() { new Inner(); }

Q) Given:
class Outer2 {
  class Inner2 {
// line n1
  }
}

Which can be added individually at line n1
A) Inner2(Outer2 Outer2.this){}
B) Inner2(Outer2 that){}
C) Inner2(Outer2 this){}
D) Inner2(Inner2 this) {}
E) void doStuff(Inner2 this) {}

Q) Which declaration allows this code:
    Person p = new Person("Siobhan", "On the hill");
    System.out.println(p);

to result in:
Person[name=Siobhan, address=On the hill]

A)
record PersonA {
  String name, address;
}

B)
record Person(private String name, private String address) {
  Person {
    if (name == null || address == null) {
      throw new IllegalArgumentException();
    }
    this.name = name;
    this.address = address;
  }
}

C)
record Person(String name, String address) {
  private String name;
  private String address;
  Person {
    if (name == null || address == null) {
      throw new IllegalArgumentException();
    }
  }
}

D)
record Person(String name, String address) {
  Person {
    if (name == null || address == null) {
      throw new IllegalArgumentException();
    }
  }
}

E)
record Person(String name, String address) {
  Person(String name, String address) {
    if (name == null || address == null) {
      throw new IllegalArgumentException();
    }
  }
}

F)
record Person(String name, String address) {
  Person(String name, String address) {
    if (name == null || address == null) {
      throw new IllegalArgumentException();
    }
    this.name = name;
    this.address = address;
  }
}

Q) Given, in a single file X.java:
interface ArbInter {}
final class Y implements X {}
sealed interface X /* point x */{}
// line n1

Which is/are true?
A) the code compiles as it stands
B) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line n1
class Z implements X {}
C) the code compiles if the following is added at point x
permits Y, Z
AND this is added at line n1
record Z() implements X {}
D) the code compiles if this is added at line n1
enum Z implements X {}
E) the code compiles if the following is added at point x
   permits Y extends ArbInter
F) the code compiles if the following is added at point x
permits Y
AND this is added at line n1
final class Z implements X {}
G) the code compiles if the following is added at line n1
non-sealed abstract class Z implements X permits Q {}
final class Q extends Z {}

Q)
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(y); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!









